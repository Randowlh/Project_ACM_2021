{"cpp":{
"prefix": "segtree",
"body":["struct segtree{",
"	int seg[maxn<<2];",
"	int lazy[maxn<<2];",
"	inline void pushup(int x){",
"		seg[x]=seg[lson(x)]+seg[rson(x)];",
"	}",
"	inline void pushdown(int l,int r,int x){",
"		if(!lazy[x])",
"		return;",
"		int mid=l+r>>1;",
"		seg[lson(x)]+=lazy[x]*(mid-l+1);",
"		lazy[lson(x)]+=lazy[x];",
"		lazy[rson(x)]+=lazy[x];",
"		seg[rson(x)]+=lazy[x]*(r-mid);",
"		lazy[x]=0;",
"	}",
"	void build(int a[],int x,int l,int r){",
"		lazy[x]=0;",
"		if(l==r){",
"			seg[x]=a[l];",
"			return;	",
"		}",
"		int mid=l+r>>1;",
"		build(a,lson(x),l,mid);",
"		build(a,rson(x),mid+1,r);",
"		pushup(x);",
"	}",
"	void update(int x,int l,int r,int ql,int qr,int v){",
"		if(l>=ql&&r<=qr){",
"			seg[x]+=(r-l+1)*v;",
"			lazy[x]+=v;",
"			return;",
"		}",
"		pushdown(l,r,x);",
"		int mid=(l+r)>>1;",
"		if(ql<=mid)",
"			update(lson(x),l,mid,ql,qr,v);",
"		if(qr>mid)",
"			update(rson(x),mid+1,r,ql,qr,v);",
"		pushup(x);",
"	}",
"	int query(int x,int l,int r,int ql,int qr){",
"		if(ql<=l&&qr>=r)",
"			return seg[x];",
"		int mid=l+r>>1,ans=0;",
"		pushdown(l,r,x);",
"		if(ql<=mid)",
"			ans+=query(lson(x),l,mid,ql,qr);",
"		if(qr>mid)",
"			ans+=query(rson(x),mid+1,r,ql,qr);",
"		return ans;",
"	}",
"}tree;"
],
"description": "线段树"
}
}
