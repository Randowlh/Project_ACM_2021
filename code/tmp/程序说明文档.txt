程序文档
本题采用了经典的01背包动态规划模型
01背包问题是一种组合优化的NP完全问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。问题的名称来源于如何选择最合适的物品放置于给定背包中
我们假定w1, ..., wn和W都是正整数。我们将在总重量不超过Y的前提下，前j种物品的总价格所能达到的最高值定义为A(j, Y)。
A(j, Y)的递推关系为：
A(0, Y) = 0
如果wj > Y, A(j, Y) = A(j - 1, Y)
如果wj ≤ Y, A(j, Y) = max { A(j - 1, Y), pj + A(j - 1, Y - wj)}
通过计算A(n, W)即得到最终结果。为提高算法性能，我们把先前计算的结果存入表中。因此算法需要的时间和空间都为O(nW)

对于题目给出的这个问题
我们利用一个二维数组dp[i][j]来描述动态规划时的状态
第一位i代表当前执行了几个项目
都二维j代表当前已经过了多少年
变量dp[i][j]就代表在执行i个项目并且过了j年时最少的花费为多少
项目储存在w和v数组中，w[i]代表第i个项目的耗时，v[i]代表第i个项目的花费
则可以将项目看成体积为w价值为v的物品
至此该问题转化为二维的完全背包问题
对于状态间的转移则可以得出递推式 dp[i][j]=MAX(dp[i][j],dp[i-1][j-w]+v)
对于dp[i][j]这个状态，可以枚举w和v来看是否能从已知的状态推得
当发生状态转移的时候，我们可以知道有一个状态已经更优了
所以将list dd[i][j]复制成上一个情况，并且再加上转移时所添加的物品j
对于答案我们遍历dp数组中所有i大于等于12的项（已经做了12个项目了）所得的最小值即为解
同时我们得出最小值的同时
也能得出最小值这个状态所对应的方案